#include <vector>

#include "entry.h"
#include "midus_tree_structs.h"

class algorithm;

class midus_entry : public entry {
public:
    midus_entry(TDC_branch& tdc_in, QDC_branch& qdc_in);
	~midus_entry() {;};
    void accept(algorithm *const) const;
	
	double get_QDC_value(int) const;
	double get_TDC_value(int) const;
	int get_event_number() const;
	
	int get_number_QDC_values() const;
	int get_number_TDC_values() const;

private:
    void init(TDC_branch& tdc_in, QDC_branch& qdc_in);
	midus_entry();
	std::vector<double> QDC_m;
	std::vector<double> TDC_m;
	int event_number_m;
    int n_tdc_hits_m;
};


inline double midus_entry::get_QDC_value(int index) const {
	return QDC_m[index];
}

inline double midus_entry::get_TDC_value(int index) const {
	return TDC_m[index];
}

inline int midus_entry::get_event_number() const{
	return event_number_m;
}

inline int midus_entry::get_number_QDC_values() const {
	return QDC_m.size();
}

inline int midus_entry::get_number_TDC_values() const {
	return TDC_m.size();
}


==============================================================================



midus_entry::midus_entry(TDC_branch& tdc_in, QDC_branch& qdc_in){
    init(tdc_in, qdc_in);
}

midus_entry::~midus_entry() {std::cout << "midus_entry destructor" << std::endl;}

void midus_entry::init(TDC_branch& tdc_in, QDC_branch& qdc_in) {
    
}

void midus_entry::accept(algorithm *const alg) const{
    
}



